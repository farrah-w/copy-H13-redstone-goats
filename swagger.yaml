swagger: "2.0"
info:
  title: Redstone Goats Order API
  description: API for creating and managing orders with UBL XML document generation. State diagram is available at https://ibb.co/gZnRGDpQ.
  version: 1.0.0
  
host: "h13-redstone-goats.vercel.app" 

schemes:
  - https

tags:
  - name: "User Functions"
    description: Routes for user account handling
  - name: "Buyer Routes"
    description: Routes accessible and usable by the buyer party.
  - name: "Seller Routes"
    description: Routes accessible and usable by the seller party.
  - name: "Test Functions"
    description: Routes used for tests.

paths:
  /v1/clear:
    delete:
      summary: Reset state of application back to the initial state.
      description: Clear all user, order etc. details.
      tags:
        - "Test Functions"
      responses:
        200: 
          description: Sucess
          schema: 
            type: object
            
  /v1/user/register:
    post:
      summary: Register a new user.
      description: Registers a new user and returns the userId.
      tags:
        - "User Functions"
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
              password:
                type: string
              nameFirst:
                type: string
              nameLast:
                type: string
      responses:
        200: 
          description: Success
          schema: 
            type: object
            properties:
              userId:
                type: integer
        400:
          description: Bad request from client.
          schema:
            type: object
            properties:
              Error:
                type: string
                example: "Error Message Here"
          
  /v1/user/login:
    post:
      summary: Login an existing user
      description: Authenticate a user with email and password.
      tags:
        - "User Functions"
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
              password:
                type: string
      responses:
        200:
          description: Success
          schema:
            type: object
            properties:
              userId:
                type: integer
        400:
          description: Bad request from client
          schema:
            type: object
            properties:
              Error:
                type: string
                example: "Error Message Here"
        401:
          description: Token is unauthorized/invalid
          schema:
            type: object
            properties:
              Error:
                type: string
                example: "Error Message Here"

  /v1/user/logout:
    post:
      summary: Logout an existing user
      description: Logout a user by blacklisting the JWT token.
      tags:
        - "User Functions"
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              Token:
                type: string
      responses:
        200:
          description: Success
          schema:
            type: object
        400:
          description: Bad request from client
          schema:
            type: object
            properties:
              Error:
                type: string
                example: "Error Message Here"
        401:
          description: Token is unauthorized/invalid
          schema:
            type: object
            properties:
              Error:
                type: string
                example: "Error Message Here"
  /v1/user/details:
    get:
      summary: Gets a user's details
      description: Retrieve the details about a specific user
      tags:
        - "User Functions"
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              userId:
                type: integer
      responses:
        200:
          description: Success
          schema:
            type: object
            properties:
              userId:
                type: integer
              name:
                type: string
              email:
                type: string
              numSuccessfulLogins: 
                type: integer
              numFailedPasswordsSinceLastLogin:
                type: integer
        400:
          description: Bad request from client
          schema:
            type: object
            properties:
              Error:
                type: string
                example: "Error Message Here"
        401:
          description: Token is unauthorized/invalid
          schema:
            type: object
            properties:
              Error:
                type: string
                example: "Error Message Here"
    put:
      summary: Updates a user's details
      description: Change the current user details
      tags:
        - "User Functions"
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              userId:
                type: integer
              email:
                type: string
              nameFirst:
                type: string
              nameLast:
                type: string
      responses:
        200:
          description: Success
          schema:
            type: object
        400:
          description: Bad request from client
          schema:
            type: object
            properties:
              Error:
                type: string
                example: "Error Message Here"
        401:
          description: Token is unauthorized/invalid
          schema:
            type: object
            properties:
              Error:
                type: string
                example: "Error Message Here"

  /v1/order/create:
    post:
      summary: Creates an order and produces a UBL XML document.
      description: Creates an order with items, user details, billing details, and delivery instructions.
      tags:
        - "Buyer Routes"
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: order
          required: true
          schema:
            $ref: "#/definitions/OrderRequest"
      responses:
        201:
          description: Order created
          schema:
            type: object
            properties:
              orderId:
                type: integer
        400:
          description: Bad request from client e.g invalid bank details, invalid order date
          schema:
            type: object
            properties:
              Error:
                type: string
                example: "Error Message Here"
        401:
          description: Token is unauthorized/invalid or a different name is registered to the userId.
          schema:
            type: object
            properties:
              Error:
                type: string
                example: "Error Message Here"

  /v1/{userId}/order/{orderId}/change:
    put:
      summary: Edit an existing order with new details and produce a new UBL XML document.
      description: Allows updating of order details, including items, user information, billing details, and delivery instructions.
      tags:
        - "Buyer Routes"
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          required: true
          type: integer
        - name: orderId
          in: path
          required: true
          type: integer
        - in: body
          name: updatedData
          schema:
            $ref: "#/definitions/OrderChangeParam"
      responses:
        201:
          description: Order updated
          schema:
            type: object
            properties:
              orderId:
                type: integer
        400:
          description: Bad request from client e.g invalid bank details, invalid order date
          schema:
            type: object
            properties:
              Error:
                type: string
                example: "Error Message Here"
        401:
          description: Token is unauthorized/invalid or a different name is registered to the userId.
          schema:
            type: object
            properties:
              Error:
                type: string
                example: "Error Message Here"

  /v1/{userId}/order/{orderId}/cancel:
    put:
      summary: Cancel an order before dispatch.
      description: Cancels an existing order and adds it to the user's cancel order history.
      tags:
        - "Buyer Routes"
        - "Seller Routes"
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          required: true
          type: integer
        - name: orderId
          in: path
          required: true
          type: integer
        - in: body
          name: cancelRequest
          schema:
            type: object
            properties:
              reason:
                type: string
      responses:
        200:
          description: Order canceled
          schema:
            type: object
            properties:
              cancelled:
                type: boolean
              reason:
                type: string
        400:
          description: Unknown orderId
          schema:
            type: object
            properties:
              Error:
                type: string
                example: "Error Message Here"
        404:
          description: Order not found.
          schema:
            type: object
            properties:
              Error:
                type: string
                example: "Error Message Here"

  /v1/order/{orderId}/confirm:
    put:
      summary: Finalize and confirm order.
      description: Finalizes the UBL XML document and adds it to the user’s successful order history.
      tags:
        - "Buyer Routes"
        - "Seller Routes"
      parameters:
        - name: orderId
          in: path
          required: true
          type: integer
      responses:
        200:
          description: Order confirmed
          schema:
            type: object
        400:
          description: OrderId missing or invalid
          schema:
            type: object
            properties:
              Error:
                type: string
                example: "Error Message Here"
        404:
          description: Order not found
          schema:
            type: object
            properties:
              Error:
                type: string
                example: "Error Message Here"

  /v1/{userId}/order/history:
    post:
      summary: Retrieve user order history.
      description: Retrieves the order history of the specific buyer.
      tags:
        - "Buyer Routes"
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          required: true
          type: integer
      responses:
        200:
          description: Order history retrieved
          schema:
            $ref: "#/definitions/OrderHistory"
        400:
          description: UserId missing or invalid
          schema:
            type: object
            properties:
              Error:
                type: string
                example: "Error Message Here"

  /v1/{userId}/order/recommendation:
    get:
      summary: Recommend orders based on history.
      description: Views trends in order history and recommends an order to the buyer.
      tags:
        - "Buyer Routes"
      parameters:
        - name: userId
          in: path
          required: true
          type: integer
      responses:
        200:
          description: Recommended order
          schema:
            $ref: "#/definitions/OrderRecommendation"

  /v1/order/{userId}/sales:
    get:
      summary: Send sales analytics data.
      description: Sends analytical data to the product distributor, with different options for data format. 
      tags:
        - "Seller Routes"
      parameters:
        - name: CSV
          in: query
          type: boolean
          default: true
        - name: JSON
          in: query
          type: boolean
          default: true
        - name: PDF
          in: query
          type: boolean
          default: true
        - name: userId
          in: path
          required: true
          type: integer
      responses:
        200:
          description: Sales data sent
          schema:
            $ref: "#/definitions/SalesData"
        400:
          description: UserId missing or invalid
          schema:
            type: object
            properties:
              Error:
                type: string
                example: "Error Message Here"

definitions:
  OrderRequest:
    type: object
    properties:
      items:
        type: array
        items:
          $ref: "#/definitions/Item"
      quantities:
        type: array
        items:
          type: number
      buyer:
        $ref: "#/definitions/UserSimple"
      billingDetails:
        $ref: "#/definitions/BillingDetailsParam"
      delivery:
        $ref: "#/definitions/DeliveryInstructions"
      lastEdited:
        type: string
        format: date-time
      status:
        type: string
        enum:
          - pending
          - confirmed
          - cancelled
      totalPrice:
        type: number
      createdAt:
        type: string
        format: date-time
  UserSimple:
    type: object
    properties:
      id:
        type: number
      name:
        type: string
      streetName:
        type: string
      cityName:
        type: string
      postalZone:
        type: string
      cbcCode:
        type: string
  BillingDetailsParam:
    type: object
    properties:
      creditCardNumber:
        type: integer
        format: int64
      CVV:
        type: integer
        format: int32
      expiryDate:
        type: string
        format: date
  DeliveryInstructions:
    type: object
    properties:
      streetName:
        type: string
      citName:
        type: string
      postalZone:
        type: string
      countrySubentity:
        type: string
      addressLine:
        type: string
      cbcCode:
        type: string
      startDate:
        type: string
        format: date
      startTime:
        type: string
        format: date-time
      endDate:
        type: string
        format: date
      endTime:
        type: string
        format: date-time
  status:
    type: string
    enum:
      - pending
      - confirmed
      - cancelled
      
  OrderUpdate:
    type: object
    properties:
      items:
        type: array
        items:
          $ref: "#/definitions/Item"
  Item:
    type: object
    properties:
      id:
        type: number
      name:
        type: string
      price:
        type: number
      quantity:
        type: integer
      seller:
        type: object
        $ref: "#/definitions/UserSimple"
      
  User:
    type: object
    properties:
      userId:
        type: integer
      name:
        type: string
  BillingDetails:
    type: object
    properties:
      creditCardNumber:
        type: integer
      CVV:
        type: integer
      expiryDate:
        type: string
  EmailRequest:
    type: object
    properties:
      emailFrom:
        type: string
      emailTo:
        type: string
      status:
        type: boolean
  OrderHistory:
    type: object
    properties:
      successfulOrders:
        type: array
        items: 
          $ref: "#/definitions/OrderRequest"
      cancelledOrders:
        type: array
        items: 
          $ref: "#/definitions/OrderRequest"
  OrderRecommendation:
    type: object
    properties:
      recommendedOrder:
        type: array
        items: 
          $ref: "#/definitions/OrderRequest"
  SalesData:
    type: object
    properties:
      sales:
        type: array
        items:
          type: object
          properties:
            id:
              type: number
            name:
              type: string
            price:
              type: number
            quantity:
              type: integer
      CSVurl:
        type: string
  OrderChangeParam:
    type: object
    properties:
      items:
        type: array
        items:
          type: object
          properties:
            itemId:
              type: number
            newQuantity:
              type: number
            name:
              type: string
            seller:
              $ref: "#/definitions/UserSimple"
            description:
              type: string
            price:
              type: number
